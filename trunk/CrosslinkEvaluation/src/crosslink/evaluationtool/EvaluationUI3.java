 /*
 * EvaluationUI.java
 *
 * The main UI of evaluation tool
 */
package crosslink.evaluationtool;

import crosslink.measures.Data;
import crosslink.measures.ResultSetManager;
import java.awt.Color;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.xml.XMLConstants;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;

import ltwassessment.utility.WildcardFiles;

import org.jCharts.chartData.ChartDataException;
import org.jCharts.properties.PropertyException;

import org.xml.sax.SAXException;

import crosslink.measures.metricsCalculation;
import crosslink.measures.plotsCalculation;
import crosslink.resultsetGenerator.LtwResultsetType;
import crosslink.rungenerator.InexSubmission;
import crosslink.rungenerator.ToFileType;
import crosslink.rungenerator.TopicType;
import crosslink.util.JChartDialog;
import crosslink.util.ioFileFilter;
import crosslink.util.jfcFileFilter;
import crosslink.util.runsXMLConvertors;

/**
 * Created on 7 September 2007, 09:58
 * @author  Darren Huang, Eric
 */
public class EvaluationUI3 extends JFrame {

    private RunTablePanel realRunTablePanel;
    private EvaTablePanel realEvaTablePanel;
    private File[] runFileCache = null;
    // For 2008
//    private String[] resultSetArray = {"6600F2FWikiResultSet.xml", "50A2BWikiResultSet.xml", "50A2BManualResultSet.xml"};
    // For 2009
//    private String[] resultSetArray = {"5000F2FWikiResultSet.xml", "33A2BWikiResultSet.xml", "33A2BManualResultSet.xml"};
//    private String[] resultSetArray = {"A2FWikiGroundTruthResultSet", "A2FWikiGroundTruthResultSet", "A2BWikiManualResultSet"};
//    private String resultFilePath = "A2BManualResultSet.xml";
    private String schemaFilePath = "CrosslinkSubmissionSchema.xsd";

    private static void log(Object aObject) {
        System.out.println(String.valueOf(aObject));
    }

    private static void errlog(Object aObject) {
        System.err.println(String.valueOf(aObject));
    }
    private int langSelected = Data.LANGUAGE_CHINESE;

    /** Creates new form EvaluationUI */
    public EvaluationUI3() {

        this.realRunTablePanel = new RunTablePanel();
        this.realEvaTablePanel = new EvaTablePanel();


        initComponents();
        
        jRadioLangZh.setSelected(true);

        jRBA2BWikirs.setVisible(false);
        if (!ResultSetManager.getInstance().checkIfManualResultSetAvailable())
        	jRBA2BManualrs.setEnabled(false);
        
        // ------------------------------------------
//        resultFilePath = getResultSetPath();
        // ------------------------------------------
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        runTbRowMenu = new javax.swing.JPopupMenu();
        jMenuItemDelete = new javax.swing.JMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        rsGroup = new javax.swing.ButtonGroup();
        langButtonGroup = new javax.swing.ButtonGroup();
        openfilesPanel = new javax.swing.JPanel();
        filedirectoryTextField = new javax.swing.JTextField();
        openfilesButton = new javax.swing.JButton();
        filecleanButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jRBF2FWikirs = new javax.swing.JRadioButton();
        jRBA2BWikirs = new javax.swing.JRadioButton();

        jRBA2BManualrs = new javax.swing.JRadioButton();
        uploadButton = new javax.swing.JButton();
        runtablePanel = new javax.swing.JPanel();
        fullruntableButton = new javax.swing.JButton();
        runtablecleanallButton = new javax.swing.JButton();
        runTablePanelHolder = new javax.swing.JPanel();
        this.runTablePanelHolder.add(this.realRunTablePanel);
        evatablePanel = new javax.swing.JPanel();
        fullevatableButton = new javax.swing.JButton();
        evaTablePanelHolder = new javax.swing.JPanel();
        this.evaTablePanelHolder.add(this.realEvaTablePanel);
        evatablecleanallButton = new javax.swing.JButton();
        plotPanel = new javax.swing.JPanel();
        RPCurveRadioButton = new javax.swing.JRadioButton();
        getplotsButton = new javax.swing.JButton();
        topicSelectionPanel = new javax.swing.JPanel();
        jRBalltopics = new javax.swing.JRadioButton();
        jRBonlysubmitted = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        calculationPanel1 = new javax.swing.JPanel();
        jRBFileToFile = new javax.swing.JRadioButton();
        jRBAnchorToBEP = new javax.swing.JRadioButton();
        evaluateButton = new javax.swing.JButton();
        langSelectionPanel = new javax.swing.JPanel();
        jRadioLangZh = new javax.swing.JRadioButton();
        jRadioLangJa = new javax.swing.JRadioButton();
        jRadioLangAll = new javax.swing.JRadioButton();
        jRadioLangJa1 = new javax.swing.JRadioButton();
        fileMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();

        jMenuItemDelete.setText("delete");
        jMenuItemDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDeleteActionPerformed(evt);
            }
        });
        runTbRowMenu.add(jMenuItemDelete);

        add(jRBalltopics);
        add(jRBonlysubmitted);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NTCIR 9: Crosslink Evaluation"); // NOI18N

        openfilesButton.setText("Open Files");
        openfilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openfilesButtonActionPerformed(evt);
            }
        });

        filecleanButton.setText("Clear");
        filecleanButton.setPreferredSize(new java.awt.Dimension(180, 23));
        filecleanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filecleanButtonActionPerformed(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "QRels Selection", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        rsGroup.add(jRBF2FWikirs);
        jRBF2FWikirs.setSelected(true);
        jRBF2FWikirs.setText("Wikipedia Ground-Truth");
        jRBF2FWikirs.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRBF2FWikirs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBF2FWikirsActionPerformed(evt);
            }
        });

        rsGroup.add(jRBA2BWikirs);
        jRBA2BWikirs.setText("Wikipedia A2B Ground-Truth");
        jRBA2BWikirs.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRBA2BWikirs.setEnabled(false);

        rsGroup.add(jRBA2BManualrs);
        jRBA2BManualrs.setText("Manual Assessment");
        jRBA2BManualrs.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRBA2BManualrs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBA2BManualrsActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jRBF2FWikirs)
                .add(40, 40, 40)
                .add(jRBA2BWikirs)
                .add(45, 45, 45)
                .add(jRBA2BManualrs)
                .addContainerGap(61, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jRBF2FWikirs)
                .add(jRBA2BWikirs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jRBA2BManualrs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        jRBA2BWikirs.setVisible(false);

        uploadButton.setText("Load");
        uploadButton.setPreferredSize(new java.awt.Dimension(180, 23));
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout openfilesPanelLayout = new org.jdesktop.layout.GroupLayout(openfilesPanel);
        openfilesPanel.setLayout(openfilesPanelLayout);
        openfilesPanelLayout.setHorizontalGroup(
            openfilesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(openfilesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(openfilesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(openfilesPanelLayout.createSequentialGroup()
                        .add(openfilesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(openfilesPanelLayout.createSequentialGroup()
                                .add(filecleanButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(uploadButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(openfilesPanelLayout.createSequentialGroup()
                                .add(filedirectoryTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(openfilesButton)))
                        .addContainerGap())))
        );
        openfilesPanelLayout.setVerticalGroup(
            openfilesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(openfilesPanelLayout.createSequentialGroup()
                .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(openfilesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(openfilesButton)
                    .add(filedirectoryTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(openfilesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(openfilesPanelLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(uploadButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(openfilesPanelLayout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(filecleanButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        runtablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Run Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        runtablePanel.setName("File Information"); // NOI18N

        fullruntableButton.setText("Manage Table");
        fullruntableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullruntableButtonActionPerformed(evt);
            }
        });

        runtablecleanallButton.setText("Clear Run Table");
        runtablecleanallButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runtablecleanallButtonActionPerformed(evt);
            }
        });

        runTablePanelHolder.setLayout(new javax.swing.BoxLayout(runTablePanelHolder, javax.swing.BoxLayout.LINE_AXIS));

        org.jdesktop.layout.GroupLayout runtablePanelLayout = new org.jdesktop.layout.GroupLayout(runtablePanel);
        runtablePanel.setLayout(runtablePanelLayout);
        runtablePanelLayout.setHorizontalGroup(
            runtablePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(runtablePanelLayout.createSequentialGroup()
                .addContainerGap(465, Short.MAX_VALUE)
                .add(fullruntableButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(runtablecleanallButton))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, runTablePanelHolder, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 683, Short.MAX_VALUE)
        );
        runtablePanelLayout.setVerticalGroup(
            runtablePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, runtablePanelLayout.createSequentialGroup()
                .add(runTablePanelHolder, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(runtablePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(fullruntableButton)
                    .add(runtablecleanallButton)))
        );

        evatablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Evaluation Sets", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        fullevatableButton.setText("Manage Table");
        fullevatableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullevatableButtonActionPerformed(evt);
            }
        });

        evaTablePanelHolder.setLayout(new javax.swing.BoxLayout(evaTablePanelHolder, javax.swing.BoxLayout.LINE_AXIS));

        evatablecleanallButton.setText("Clear Evaluation Table");
        evatablecleanallButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evatablecleanallButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout evatablePanelLayout = new org.jdesktop.layout.GroupLayout(evatablePanel);
        evatablePanel.setLayout(evatablePanelLayout);
        evatablePanelLayout.setHorizontalGroup(
            evatablePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(evatablePanelLayout.createSequentialGroup()
                .addContainerGap(411, Short.MAX_VALUE)
                .add(fullevatableButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(evatablecleanallButton)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, evaTablePanelHolder, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 683, Short.MAX_VALUE)
        );
        evatablePanelLayout.setVerticalGroup(
            evatablePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, evatablePanelLayout.createSequentialGroup()
                .add(evaTablePanelHolder, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 203, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(evatablePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(evatablecleanallButton)
                    .add(fullevatableButton)))
        );

        plotPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Plots Computation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        RPCurveRadioButton.setSelected(true);
        RPCurveRadioButton.setText("Recall-Precision Curves");
        RPCurveRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        getplotsButton.setText("Get Plots");
        getplotsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getplotsButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout plotPanelLayout = new org.jdesktop.layout.GroupLayout(plotPanel);
        plotPanel.setLayout(plotPanelLayout);
        plotPanelLayout.setHorizontalGroup(
            plotPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, plotPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(RPCurveRadioButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 420, Short.MAX_VALUE)
                .add(getplotsButton)
                .addContainerGap())
        );
        plotPanelLayout.setVerticalGroup(
            plotPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(plotPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(getplotsButton)
                .add(RPCurveRadioButton))
        );

        topicSelectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Topic Selection", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        buttonGroup1.add(jRBalltopics);
        jRBalltopics.setSelected(true);
        jRBalltopics.setText("Use all topics");
        jRBalltopics.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        buttonGroup1.add(jRBonlysubmitted);
        jRBonlysubmitted.setText("Use only submitted topics");
        jRBonlysubmitted.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        org.jdesktop.layout.GroupLayout topicSelectionPanelLayout = new org.jdesktop.layout.GroupLayout(topicSelectionPanel);
        topicSelectionPanel.setLayout(topicSelectionPanelLayout);
        topicSelectionPanelLayout.setHorizontalGroup(
            topicSelectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(topicSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jRBalltopics)
                .add(26, 26, 26)
                .add(jRBonlysubmitted)
                .addContainerGap(350, Short.MAX_VALUE))
        );
        topicSelectionPanelLayout.setVerticalGroup(
            topicSelectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(topicSelectionPanelLayout.createSequentialGroup()
                .add(topicSelectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jRBalltopics)
                    .add(jRBonlysubmitted))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        calculationPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Task Selection", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        buttonGroup2.add(jRBFileToFile);
        jRBFileToFile.setSelected(true);
        jRBFileToFile.setText("Anchor to File (File to File)");

        buttonGroup2.add(jRBAnchorToBEP);
        jRBAnchorToBEP.setText("Anchor to Bep");

        org.jdesktop.layout.GroupLayout calculationPanel1Layout = new org.jdesktop.layout.GroupLayout(calculationPanel1);
        calculationPanel1.setLayout(calculationPanel1Layout);
        calculationPanel1Layout.setHorizontalGroup(
            calculationPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(calculationPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jRBFileToFile)
                .add(45, 45, 45)
                .add(jRBAnchorToBEP)
                .addContainerGap(323, Short.MAX_VALUE))
        );
        calculationPanel1Layout.setVerticalGroup(
            calculationPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(calculationPanel1Layout.createSequentialGroup()
                .add(calculationPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jRBFileToFile)
                    .add(jRBAnchorToBEP))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        evaluateButton.setText("Evaluate");
        evaluateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evaluateButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(calculationPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(evaluateButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 695, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(calculationPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(evaluateButton)
                .addContainerGap())
        );

        langSelectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Language Selection", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        langButtonGroup.add(jRadioLangZh);
        jRadioLangZh.setSelected(true);
        jRadioLangZh.setText("Chinese");
        jRadioLangZh.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioLangZh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioLangZhActionPerformed(evt);
            }
        });

        langButtonGroup.add(jRadioLangJa);
        jRadioLangJa.setText("Japanese");
        jRadioLangJa.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioLangJa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioLangJaActionPerformed(evt);
            }
        });

        langButtonGroup.add(jRadioLangAll);
        jRadioLangAll.setText("All");
        jRadioLangAll.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioLangAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioLangAllActionPerformed(evt);
            }
        });

        langButtonGroup.add(jRadioLangJa1);
        jRadioLangJa1.setText("Korean");
        jRadioLangJa1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioLangJa1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioLangJa1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout langSelectionPanelLayout = new org.jdesktop.layout.GroupLayout(langSelectionPanel);
        langSelectionPanel.setLayout(langSelectionPanelLayout);
        langSelectionPanelLayout.setHorizontalGroup(
            langSelectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(langSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jRadioLangZh)
                .add(18, 18, 18)
                .add(jRadioLangJa)
                .add(18, 18, 18)
                .add(jRadioLangJa1)
                .add(18, 18, 18)
                .add(jRadioLangAll)
                .addContainerGap(360, Short.MAX_VALUE))
        );
        langSelectionPanelLayout.setVerticalGroup(
            langSelectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(langSelectionPanelLayout.createSequentialGroup()
                .add(langSelectionPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jRadioLangZh)
                    .add(jRadioLangJa)
                    .add(jRadioLangJa1)
                    .add(jRadioLangAll))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");

        aboutMenuItem.setMnemonic('A');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(aboutMenuItem);

        exitMenuItem.setMnemonic('E');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        fileMenuBar.add(fileMenu);

        setJMenuBar(fileMenuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, openfilesPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, topicSelectionPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(runtablePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, plotPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(evatablePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(langSelectionPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(openfilesPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(runtablePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(4, 4, 4)
                .add(langSelectionPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(topicSelectionPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(evatablePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(plotPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        langSelectionPanel.getAccessibleContext().setAccessibleName("Lang Selection");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void evaluationTypeActionPerformed(ActionEvent evt) {
        if (!this.jRBA2BManualrs.getModel().isSelected()) {
            //this.jRBFileToFile.setSelected(true);
        	this.jRBFileToFile.setSelected(true);
        }
    }

    private void f2fResultSetTypeActionPerformed(ActionEvent evt) {
        //this.jRBFileToFile.setSelected(true);
    	this.jRBFileToFile.setSelected(true);
    }

    private void getplotsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getplotsButtonActionPerformed
            boolean useAllTopics = true;
            boolean useFileToBep = false;
            boolean useAnchorToFile = false;
            boolean useAnchorToBEP = false;
            int colorColumnNo = 10;
            int linewidthColumnNo = 11;

            if (this.jRBalltopics.getModel().isSelected()) {
                useAllTopics = true;
            } else {
                useAllTopics = false;   // Only use submitted topics to calculate
            }
//            if (this.jRBFileToBep.getModel().isSelected()) {
//                useFileToBep = true;
//            } else {
//                useFileToBep = false;
//            }
//            if (this.jRBFileToFile.getModel().isSelected()) {
//                useAnchorToFile = true;
//            } else {
//                useAnchorToFile = false;
//            }
            if (this.jRBAnchorToBEP.getModel().isSelected()) {
                useAnchorToBEP = true;
            } else {
                useAnchorToBEP = false;
            }

            Vector data = this.realEvaTablePanel.getModelData();
            HashMap plotHashmap = new HashMap();
            for (Object row : data) {
                Vector aRow = (Vector) row;
                if (aRow.get(12).equals(Boolean.TRUE)) {
                    HashMap hm = (HashMap) plotHashmap.get(aRow.get(0));
                    if (hm == null) {
                        hm = new HashMap();
                        plotHashmap.put(aRow.get(0), hm);
                    }
                    Object[] ctObject = new Object[2];
                    ctObject[0] = aRow.get(colorColumnNo);
                    ctObject[1] = aRow.get(linewidthColumnNo);
                    hm.put(aRow.get(1), ctObject);   // Type & Color & Thick
                }
            }

            if (plotHashmap.isEmpty()) {

                JOptionPane.showMessageDialog(this, "Please select the plot to draw", "Message Board", JOptionPane.INFORMATION_MESSAGE);

            } else {
//                resultFilePath = getResultSetPath();
//                File resultFile = new File(resultFilePath);
                Vector<Object[]> incommingPlotData = new Vector<Object[]>();
                Vector<Object[]> outgoingPlotData = new Vector<Object[]>();
                Vector<Object[]> combinationPlotData = new Vector<Object[]>();
                // RESULT_TYPE_NUM: incoming --> outgoing --> combination
                for (int i = 0; i < this.runFileCache.length; i++) {
                    plotsCalculation.PRCurveResult pcr;
					try {
						pcr = plotsCalculation.plotCalculate(/*resultFile, */this.runFileCache[i], useAllTopics, useFileToBep, useAnchorToFile, useAnchorToBEP, langSelected);

	                    if (plotHashmap.containsKey((Object) pcr.plotRunId)) {
	
	                        HashMap hmap = (HashMap) plotHashmap.get((Object) pcr.plotRunId);
	                        if (hmap.containsKey("incoming")) {
	                            incommingPlotData.add(new Object[]{
	                                        pcr.incomming, hmap.get("incoming"), pcr.plotRunId
	                                    });
	                        }
	                        if (hmap.containsKey("outgoing")) {
	                            outgoingPlotData.add(new Object[]{
	                                        pcr.outgoing, hmap.get("outgoing"), pcr.plotRunId
	                                    });
	                        }
	                        if (hmap.containsKey("f_score")) {
	                            combinationPlotData.add(new Object[]{
	                                        pcr.combination, hmap.get("f_score"), pcr.plotRunId
	                                    });
	                        }
	                    }
	                } catch (PropertyException ex) {
	                    ex.printStackTrace();
	                } catch (ChartDataException ex) {
	                    ex.printStackTrace();
	                } catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
                }

                Vector[] plotDatas = null;
                String[] plotTitle = null;
                if (incommingPlotData.isEmpty() && outgoingPlotData.isEmpty()) {
                    plotDatas = new Vector[]{combinationPlotData};
                    plotTitle = new String[]{"InteP-R Curve: Combination"};
                } else if (incommingPlotData.isEmpty() && combinationPlotData.isEmpty()) {
                    plotDatas = new Vector[]{outgoingPlotData};
                    plotTitle = new String[]{"InteP-R Curve: Outgoing"};
                } else if (outgoingPlotData.isEmpty() && combinationPlotData.isEmpty()) {
                    plotDatas = new Vector[]{incommingPlotData};
                    plotTitle = new String[]{"InteP-R Curve: Incoming"};
                } else if (incommingPlotData.isEmpty()) {
                    plotDatas = new Vector[]{
                                outgoingPlotData, combinationPlotData
                            };
                    plotTitle = new String[]{"InteP-R Curve: Outgoing", "InteP-R Curve: Combination"};
                } else if (outgoingPlotData.isEmpty()) {
                    plotDatas = new Vector[]{
                                incommingPlotData, combinationPlotData
                            };
                    plotTitle = new String[]{"InteP-R Curve: Incoming", "InteP-R Curve: Combination"};
                } else if (combinationPlotData.isEmpty()) {
                    plotDatas = new Vector[]{
                                incommingPlotData, outgoingPlotData
                            };
                    plotTitle = new String[]{"InteP-R Curve: Incoming", "InteP-R Curve: Outgoing"};
                } else {
                    plotDatas = new Vector[]{
                                incommingPlotData, outgoingPlotData, combinationPlotData
                            };
                    plotTitle = new String[]{"InteP-R Curve: Incoming", "InteP-R Curve: Outgoing", "InteP-R Curve: Combination"};
                }

                for (int j = 0; j < plotDatas.length; j++) {
                    Vector<Object[]> cool_data_points = (Vector<Object[]>) plotDatas[j];
                    JChartDialog jplot = new JChartDialog(this, false, plotTitle[j], cool_data_points);

                    // Export Selected Row Data to .CSV
                    this.exportPlotDatatoCSV(plotTitle[j], cool_data_points);
                    // End of Export to .CSV

                    Point ploca = this.getLocation();
//                    jplot.setLocation(ploca.x + j * 30, ploca.y + j * 30);
//                    jplot.setVisible(true);
                }
            }

    }//GEN-LAST:event_getplotsButtonActionPerformed

    void exportPlotDatatoCSV(String plotType, Vector<Object[]> cool_data_points) {
        try {
            String pdFileName = plotType.substring(plotType.indexOf(":") + 1) + this.getNowTime("MMddmmss") + ".CSV";
            File csvFile = new File(pdFileName);
            BufferedWriter bw = new BufferedWriter(new FileWriter(csvFile, true));
            PrintWriter pw = new PrintWriter(bw);
            String[] columnTitle = {"Run", "0.05", "0.10", "0.15", "0.20", "0.25", "0.30", "0.35", "0.40", "0.45", "0.50",
                "0.55", "0.60", "0.65", "0.70", "0.75", "0.80", "0.85", "0.90", "0.95", "1.00"
            };
            for (int k = 0; k < columnTitle.length; k++) {
                pw.print(columnTitle[k] + ",");
            }
            pw.println("");
            String rowTitle = "";
            double[] rowData = new double[20];
            for (int i = 0; i < cool_data_points.size(); i++) {
                Object[] pd = cool_data_points.get(i);
                rowTitle = pd[2].toString();
                pw.print(rowTitle + ",");
                rowData = (double[]) pd[0];
                for (int j = 0; j < rowData.length; j++) {
                    pw.print(rowData[j] + ",");
                }
                pw.println("");
            }
            pw.close();

        } catch (Exception exc) {
            System.out.println("Error While Exporting Plot Data to CSV file: /n" + exc.toString());
        }
    }

    private String getNowTime(String dateFormat) {
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
        return sdf.format(cal.getTime());
    }

    private void evatableSelectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {
        this.realEvaTablePanel.selectAllRunPlots();
    }

    private void evatableUnSelectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {
        this.realEvaTablePanel.unselectAllRunPlots();
    }

    private void fullevatableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullevatableButtonActionPerformed
        JDialog showFullEvaTable = new FullEvaTable(this);
        ((FullEvaTable) showFullEvaTable).setTable(new EvaTablePanel(this.realEvaTablePanel));
        showFullEvaTable.setVisible(true);
    }//GEN-LAST:event_fullevatableButtonActionPerformed

    private void evatablecleanallButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evatablecleanallButtonActionPerformed
    	this.realEvaTablePanel.cleanAllEvaTable();
    }//GEN-LAST:event_evatablecleanallButtonActionPerformed

        private void fullruntableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullruntableButtonActionPerformed
        JDialog showFullRunTable = new FullRunTable(this);
        ((FullRunTable) showFullRunTable).setTable(new RunTablePanel(this.realRunTablePanel));
        showFullRunTable.setVisible(true);
    }//GEN-LAST:event_fullruntableButtonActionPerformed

    private void jMenuItemDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDeleteActionPerformed
    }//GEN-LAST:event_jMenuItemDeleteActionPerformed

    private void runtablecleanallButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runtablecleanallButtonActionPerformed
        this.realRunTablePanel.cleanAllRunTable();
    }//GEN-LAST:event_runtablecleanallButtonActionPerformed

    private void load() {
        // BUGS: NEED to be fixed

        String[] fl = this.filedirectoryTextField.getText().split(";");

        ArrayList<File> fileList = new ArrayList<File>();
        for (int l = 0; l < fl.length; l++) {
            String afile = fl[l].trim();
            if (afile.length() > 0) {
            	File aFile = new File(afile);
            	if (aFile.isDirectory())
            		fileList.addAll(WildcardFiles.listFilesInStack(afile));
            	else
            		fileList.add(aFile);  	
            }
        }
        for (int k = 0; k < fileList.size(); k++) {
            try {
                JAXBContext jc = JAXBContext.newInstance("crosslink.rungenerator");
                Unmarshaller um = jc.createUnmarshaller();
                Object unmarshal = um.unmarshal(fileList.get(k));
            } catch (JAXBException ex) {
                JOptionPane.showMessageDialog(this, fileList.get(k).getAbsolutePath() + " is invalid.", "Exception Message", JOptionPane.ERROR_MESSAGE);
                fileList.remove(k);
            }
        }
        File[] files = fileList.toArray(new File[fileList.size()]);
        this.runFileCache = files;
        // -------------------------------------------------------------

        ArrayList<String[]> result;
		try {
			result = retrieveRunData(files);
	        Object[][] r = new Object[result.size()][6];
	        int count = 0;
	        for (String[] x : result) {
	            r[count][0] = x[0];
	                r[count][1] = x[1];
	                r[count][2] = x[2];
	                r[count][3] = x[3];
	                r[count][4] = x[4];
	                r[count][5] = x[5];
	                count++;
	        }
	        this.realRunTablePanel.uploadFileToTable(r);
		} catch (Exception e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(this, e.getMessage(), "Exception Message", JOptionPane.ERROR_MESSAGE);
		}

        // record the file name into "filedirectoryTextField"
        String strFiles = "";
        for (int i = 0; i < files.length; i++) {
            strFiles += files[i].getAbsolutePath() + "; ";
        }

        this.filedirectoryTextField.setText(strFiles);
    }

    private void filecleanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filecleanButtonActionPerformed
        filedirectoryTextField.setText("");
    }//GEN-LAST:event_filecleanButtonActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        JDialog about = new About(this);
        about.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    String currentOpenDir = "C:\\";
    private void openfilesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openfilesButtonActionPerformed

        String newline = "\n";
        JFileChooser fc = new JFileChooser(currentOpenDir);
        // To allow both (multiple) files and directories to be selected
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fc.setMultiSelectionEnabled(true);
        // filter XML files here
        jfcFileFilter filter = new jfcFileFilter();
        filter.addExtension("XML");
        filter.addExtension("xml");
        filter.addExtension("Xml");
        filter.setDescription("XML files only");

        fc.setFileFilter(filter);

        // Handle open files button action
        if (evt.getSource() == openfilesButton) {

            int returnVal = fc.showOpenDialog(EvaluationUI3.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {

                File[] files = fc.getSelectedFiles();

//                this.runFileCache = files;  // remember to delete
                String absFilePath = files[0].getAbsolutePath();
                currentOpenDir = absFilePath.substring(0, absFilePath.lastIndexOf(File.separator));

                if (files[0].isDirectory() && files[0].exists()) {
                    // get all files in directory
                    ioFileFilter ioFilter = new ioFileFilter();
                    files = files[0].listFiles(ioFilter);
                }
                // This part is used to eliminate the RUN files that cannot be processed by JAXB
                List<File> tmp = Arrays.asList(files);
                ArrayList<File> fileList = new ArrayList<File>(tmp);
                for (int k = 0; k < fileList.size(); k++) {
                    try {
                        JAXBContext jc = JAXBContext.newInstance("crosslink.rungenerator");

                        // ----------
                        Schema vschema = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI).newSchema(new File(schemaFilePath));

                        Unmarshaller um = jc.createUnmarshaller();
//                        um.setSchema(vschema);
                        // ----------
                        Object unmarshal = um.unmarshal(fileList.get(k));
                    } catch (SAXException sex) {
//                        System.err.println(sex.getStackTrace());
                        JOptionPane.showMessageDialog(this, fileList.get(k).getAbsolutePath() + " is invalid.\n" + sex.toString(),
                                "SAXException Message", JOptionPane.ERROR_MESSAGE);
                    } catch (JAXBException ex) {
                        String jexString = StackTraceToString(ex);
                        JOptionPane.showMessageDialog(this, fileList.get(k).getAbsolutePath() + " is invalid.\n" + jexString,
                                "Exception Message", JOptionPane.ERROR_MESSAGE);
                        fileList.remove(k);
                    }
                }
                files = fileList.toArray(new File[fileList.size()]);
                this.runFileCache = files;
                // -------------------------------------------------------------

                try {
					ArrayList<String[]> result = retrieveRunData(files);
					Object[][] r = new Object[result.size()][6];
					int count = 0;
					for (String[] x : result) {
					    r[count][0] = x[0];
					    r[count][1] = x[1];
					    r[count][2] = x[2];
					    r[count][3] = x[3];
					    r[count][4] = x[4];
					    r[count][5] = x[5];
//                    r[count][6] = x[6];
//                    r[count][7] = x[7];
					    count++;
					}

					this.realRunTablePanel.uploadFileToTable(r);
				} catch (Exception e) {
					e.printStackTrace();
					JOptionPane.showMessageDialog(this, e.getMessage(), "Exception Message", JOptionPane.ERROR_MESSAGE);
				}

                // record the file name into "filedirectoryTextField"
                String strFiles = "";
                for (int i = 0; i < files.length; i++) {
                    strFiles += files[i].getAbsolutePath() + "; ";
                }

                this.filedirectoryTextField.setText(strFiles);

            } else {
                JOptionPane.showMessageDialog(this, "Open command cancelled by the user", "Message Board", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_openfilesButtonActionPerformed

    private void evaluateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evaluateButtonActionPerformed
        try {
//            resultFilePath = getResultSetPath();
//            File resultFile = new File(resultFilePath);
            ArrayList<Object[]> result = new ArrayList<Object[]>();

            boolean useAllTopics = false;
            boolean useFileToBep = false;
            boolean useAnchorGToFile = false;
            boolean useAnchorGToBEP = false;

            if (this.jRBalltopics.getModel().isSelected()) {
                useAllTopics = true;
            }
//            if (this.jRBFileToBep.getModel().isSelected()) {
//                useFileToBep = true;
//            }
//            if (this.jRBFileToFile.getModel().isSelected()) {
//            	useFileToBep = true;
//            }
//            else if (this.jRBAnchorToFile.getModel().isSelected()) {
//                useAnchorGToFile = true;
//            } 
            /*else*/ if (this.jRBAnchorToBEP.getModel().isSelected()) {
                useAnchorGToBEP = true;
            }

            Color[][] spColor = {
                {new Color(150, 0, 0), new Color(150, 0, 0), new Color(150, 0, 0)},
                {new Color(0, 150, 0), new Color(0, 150, 0), new Color(0, 150, 0)},
                {new Color(0, 0, 150), new Color(0, 0, 150), new Color(0, 0, 150)},
                {new Color(150, 150, 0), new Color(150, 150, 0), new Color(150, 150, 0)},
                {new Color(200, 0, 200), new Color(200, 0, 200), new Color(200, 0, 200)}
            };

            Random generator = new Random();

            for (int i = 0; i < this.runFileCache.length; i++) {

                metricsCalculation.EvaluationResult er;

                er = metricsCalculation.calculate(/*resultFile, */this.runFileCache[i], useAllTopics, useFileToBep, useAnchorGToFile, useAnchorGToBEP, langSelected);
                
                if (er == null)
                	continue;

//                if (i < 5) {
//                    result.add(new Object[]{
//                        er.runId, "incoming", er.incomming[metricsCalculation.R_MAP],
//                        er.incomming[metricsCalculation.R_RPREC],er.incomming[metricsCalculation.R_P5],
//                        er.incomming[metricsCalculation.R_P10],
//                        er.incomming[metricsCalculation.R_P20],
//                        er.incomming[metricsCalculation.R_P30], er.incomming[metricsCalculation.R_P50],
//                        er.incomming[metricsCalculation.R_P250],
//                        spColor[i][0], Boolean.TRUE, Boolean.FALSE
//                    });
//                    result.add(new Object[]{
//                        er.runId, "outgoing", er.outgoing[metricsCalculation.R_MAP],
//                        er.outgoing[metricsCalculation.R_RPREC],er.outgoing[metricsCalculation.R_P5],
//                        er.outgoing[metricsCalculation.R_P10],
//                        er.outgoing[metricsCalculation.R_P20],
//                        er.outgoing[metricsCalculation.R_P30], er.outgoing[metricsCalculation.R_P50],
//                        er.outgoing[metricsCalculation.R_P250],
//                        spColor[i][1], Boolean.TRUE, Boolean.FALSE
//                    });
//                    result.add(new Object[]{
//                        er.runId, "f_score", er.combination[metricsCalculation.R_MAP],
//                        er.combination[metricsCalculation.R_RPREC],er.combination[metricsCalculation.R_P5],
//                        er.combination[metricsCalculation.R_P10],
//                        er.combination[metricsCalculation.R_P20],
//                        er.combination[metricsCalculation.R_P30], er.combination[metricsCalculation.R_P50],
//                        er.combination[metricsCalculation.R_P250],
//                        spColor[i][2], Boolean.TRUE, Boolean.FALSE
//                    });
//                } else {
//                result.add(new Object[]{
//                            er.runId, "incoming", er.incomming[metricsCalculation.R_MAP],
//                            er.incomming[metricsCalculation.R_RPREC], er.incomming[metricsCalculation.R_P5],
//                            er.incomming[metricsCalculation.R_P10],
//                            er.incomming[metricsCalculation.R_P20],
//                            er.incomming[metricsCalculation.R_P30], er.incomming[metricsCalculation.R_P50],
//                            er.incomming[metricsCalculation.R_P250],
//                            Color.LIGHT_GRAY, Boolean.FALSE, Boolean.FALSE
//                        });
                result.add(new Object[]{
                            er.runId, "outgoing", er.outgoing[metricsCalculation.R_MAP],
                            er.outgoing[metricsCalculation.R_RPREC], er.outgoing[metricsCalculation.R_P5],
                            er.outgoing[metricsCalculation.R_P10],
                            er.outgoing[metricsCalculation.R_P20],
                            er.outgoing[metricsCalculation.R_P30], er.outgoing[metricsCalculation.R_P50],
                            er.outgoing[metricsCalculation.R_P250],
                            Color.LIGHT_GRAY, Boolean.FALSE, Boolean.FALSE
                        });
//                result.add(new Object[]{
//                            er.runId, "f_score", er.combination[metricsCalculation.R_MAP],
//                            er.combination[metricsCalculation.R_RPREC], er.combination[metricsCalculation.R_P5],
//                            er.combination[metricsCalculation.R_P10],
//                            er.combination[metricsCalculation.R_P20],
//                            er.combination[metricsCalculation.R_P30], er.combination[metricsCalculation.R_P50],
//                            er.combination[metricsCalculation.R_P250],
//                            Color.LIGHT_GRAY, Boolean.FALSE, Boolean.FALSE
//                        });
//                }
            }
            // -----------------------------------------------------------------
            // =================================================================
            // Sort the "result" by f-score value decreasingly
            Object[][] objData = new Object[result.size()][];
            for (int i = 0; i < result.size(); i++) {
                objData[i] = result.get(i);
            }

            Object[][] evaData = null;
            if (result.size() > 1) {
	            Hashtable compareHash = new Hashtable();

//	            int j = 2;
//	            for (; j < objData.length; j = j + 2) {
//	                ArrayList<Object[]> threeColl = new ArrayList<Object[]>();
////	                threeColl.add(objData[j - 2]);
//	                threeColl.add(objData[j - 1]);
//	                threeColl.add(objData[j]);
//	                compareHash.put(objData[j][2], threeColl);
//	            }
//	            Vector v = new Vector(compareHash.keySet());
//	            Collections.sort(v, Collections.reverseOrder());
//
//	            evaData = new Object[result.size()][];
//	            int sortIndex = 0;
//	            int colorCount = 0;
//	            for (Enumeration e = v.elements(); e.hasMoreElements();) {
//	                Object key = (Object) e.nextElement();
//	                ArrayList<Object[]> sortColl = (ArrayList<Object[]>) compareHash.get(key);
//	                evaData[sortIndex] = sortColl.get(0);
//	                evaData[sortIndex + 1] = sortColl.get(1);
////	                evaData[sortIndex + 2] = sortColl.get(2);
//	                if (colorCount < 5) {
//	                    evaData[sortIndex][10] = spColor[colorCount][0];
//	                    evaData[sortIndex + 1][10] = spColor[colorCount][1];
////	                    evaData[sortIndex + 2][10] = spColor[colorCount][2];
//	                    evaData[sortIndex][11] = Boolean.TRUE;
//	                    evaData[sortIndex + 1][11] = Boolean.TRUE;
////	                    evaData[sortIndex + 2][11] = Boolean.TRUE;
//	                }
//	                colorCount++;
//	                sortIndex = sortIndex + 2;
//	            }

	            int j = 0;
	            for (; j < objData.length; ++j) {
	                ArrayList<Object[]> threeColl = new ArrayList<Object[]>();
	                threeColl.add(objData[j]);
	                compareHash.put(objData[j][2], threeColl);
	            }
	            Vector v = new Vector(compareHash.keySet());
	            Collections.sort(v, Collections.reverseOrder());

	            evaData = new Object[result.size()][];
	            int sortIndex = 0;
	            int colorCount = 0;
	            for (Enumeration e = v.elements(); e.hasMoreElements();) {
	                Object key = (Object) e.nextElement();
	                ArrayList<Object[]> sortColl = (ArrayList<Object[]>) compareHash.get(key);
	                evaData[sortIndex] = sortColl.get(0);
	                evaData[sortIndex][11] = Boolean.TRUE;
	                evaData[sortIndex][12] = Boolean.TRUE;
	                if (colorCount < 5) {
	                    evaData[sortIndex][10] = spColor[colorCount][0];
	                }
	                else {
	                	evaData[sortIndex][10] = new Color(generator.nextInt(255) + 1, generator.nextInt(255) + 1, generator.nextInt(255) + 1);
	                }
	                colorCount++;
	                sortIndex++;
	            }
            }
            else {
            	evaData = objData;
            	evaData[0][10] = spColor[0][0];
            }
            // END of sort the result
            // =================================================================
            // -----------------------------------------------------------------

            this.realEvaTablePanel.evaluateRunsToTable(evaData);
        } catch (Exception ex) {
            ex.printStackTrace();
//            JOptionPane.showMessageDialog(this, ex.toString(), "Exception Board", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_evaluateButtonActionPerformed

    private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filecleanButton1ActionPerformed
    	load();
    }//GEN-LAST:event_filecleanButton1ActionPerformed

    private void jRBF2FWikirsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBF2FWikirsActionPerformed
        jRBAnchorToBEP.setEnabled(false);
        jRBFileToFile.setSelected(true);
        ResultSetManager.getInstance().setEveluationType(ResultSetManager.A2F_WIKI_GROUNDTRUTH);
    }//GEN-LAST:event_jRBF2FWikirsActionPerformed

    private void jRBA2BManualrsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBA2BManualrsActionPerformed
        jRBAnchorToBEP.setEnabled(true);
        ResultSetManager.getInstance().setEveluationType(ResultSetManager.A2B_WIKI_MANUAL);
    }//GEN-LAST:event_jRBA2BManualrsActionPerformed

    private void jRadioLangZhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioLangZhActionPerformed
        langSelected = Data.LANGUAGE_CHINESE;
    }//GEN-LAST:event_jRadioLangZhActionPerformed

    private void jRadioLangJaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioLangJaActionPerformed
        langSelected = Data.LANGUAGE_JAPANESE;
    }//GEN-LAST:event_jRadioLangJaActionPerformed

    private void jRadioLangJa1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioLangJa1ActionPerformed
        langSelected = Data.LANGUAGE_KOREAN;
    }//GEN-LAST:event_jRadioLangJa1ActionPerformed

    private void jRadioLangAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioLangAllActionPerformed
        langSelected = Data.LANGUAGE_ALL;
    }//GEN-LAST:event_jRadioLangAllActionPerformed

    private ArrayList<String[]> retrieveRunData(File[] file) throws Exception {

        int runInfoColumnLength = 8;
//        resultFilePath = getResultSetPath();
//        log(resultFilePath);
//        Hashtable resultLinks = ResultSetLinksNo(new File(resultFilePath));

        ArrayList<String[]> bigResult = new ArrayList<String[]>();
        String[] result = null;
        TopicType topicType = null;
        // String[] result = null;
        for (int i = 0; i < file.length; i++) {
            
            try {
                JAXBContext jc = JAXBContext.newInstance("crosslink.rungenerator");
                Unmarshaller um = jc.createUnmarshaller();
                Object unmarshal = um.unmarshal(file[i]);
                if (unmarshal instanceof InexSubmission) {
                    InexSubmission bt = (InexSubmission) unmarshal;

                    String currentSourceLang = bt.getSourceLang();
                    if (currentSourceLang == null || currentSourceLang.length() == 0)
                    	currentSourceLang = "en";
                    
                    // default lang is the target lang
                    String currentTargetLang = bt.getDefaultLang();
                    if (currentTargetLang == null || currentTargetLang.length() == 0)
                    	throw new Exception(String.format("Incorrect run file - %s which dosen't provide the target language", file[i]));

                    Hashtable resultLinks = ResultSetManager.getInstance().getResultSetLinksNo(currentSourceLang, currentTargetLang);
                    
                    String id = bt.getParticipantId();
                    String rid = bt.getRunId();
                    for (TopicType topic : bt.getTopic()) {
                    	topicType = topic;
                        result = new String[runInfoColumnLength];
                        result[0] = id;
                        result[1] = rid;
                        result[2] = topic.getFile();
                        result[3] = topic.getName();
                        log(result[0] + " - " + result[1] + " - " + result[2] + " - " + result[3]);
                        log(resultLinks.size());
                        // -----------------------------------------------------
                        String[] topicLinks = ((String) resultLinks.get(result[2])).split(";");
                        result[5] = topicLinks[0];
                        result[7] = topicLinks[1];
                        // -----------------------------------------------------
//                        result[3] = topic.getName();
                        if (topic.getOutgoing().getAnchor().isEmpty()) {
                            result[4] = "0";
                        } else {
                            if (topic.getOutgoing().getAnchor().get(0).getTofile() == null || topic.getOutgoing().getAnchor().get(0).getTofile().isEmpty()) {
                                result[4] = "0";
                            } else {
                                // ============================
                                int outLinkCount = 0;
                                int outNonduplicateCount = 0;
                                List outItemsList = new ArrayList();
                                for (int j = 0; j < topic.getOutgoing().getAnchor().size(); j++) {
                                    List<crosslink.rungenerator.ToFileType> linkTo = topic.getOutgoing().getAnchor().get(j).getTofile();
                                    if (linkTo == null) {
                                    	System.err.println("Empty anchor:" + topic.getOutgoing().getAnchor().get(j).getName());
                                    	continue;
                                    }
                                    for (int k = 0; k < linkTo.size(); k++) {
                                        outLinkCount++;
                                        ToFileType tofile = linkTo.get(k);
//                                        int endop = tofile.toString().toLowerCase().trim().indexOf(".xml");
//                                        if (endop != -1) {
                                            String outFile = tofile.toString(); //.toString();
                                            if (!outItemsList.contains(outFile)) {
                                                outItemsList.add(outFile);
                                                outNonduplicateCount++;
                                            }
//                                        }
                                    }
                                }
                                // ============================
                                // totalFiles:nonDuplicateFiles
//                                result[4] = "" + topic.getOutgoing().getLink().size() + "(" + outNonduplicateCount + ")";
                                result[4] = "" + outLinkCount + "(" + outNonduplicateCount + ")";
                            }
                        }
//                        if (topic.getIncoming().getLink().isEmpty()) {
//                            result[6] = "0";
//                        } else {
//                            if (topic.getIncoming().getLink().get(0).getAnchor().getFile().toString().equalsIgnoreCase("")) {
//                                result[6] = "0";
//                            } else {
//                                // ============================
//                                int inLinkCount = 0;
//                                int inNonduplicateCount = 0;
//                                List inItemsList = new ArrayList();
//                                for (int j = 0; j < topic.getIncoming().getLink().size(); j++) {
//                                    int endop = topic.getIncoming().getLink().get(j).getAnchor().getFile().toString().toLowerCase().indexOf(".xml");
//                                    if (endop != -1) {
//                                        String inFile = topic.getIncoming().getLink().get(j).getAnchor().getFile().toString();
//                                        if (!inItemsList.contains(inFile)) {
//                                            inItemsList.add(inFile);
//                                            inNonduplicateCount++;
//                                        }
//                                    }
//                                }
//                                // ============================
//                                // totalFiles:nonDuplicateFiles
//                                result[6] = "" + topic.getIncoming().getLink().size() + "(" + inNonduplicateCount + ")";
//                            }
//                        }
                        bigResult.add(result);
                    }
                }
            } catch (JAXBException ex) {
                ex.printStackTrace();
            } 
            catch (Exception ex) {
            	System.err.println("Something serious happens with run: " + file[i].getAbsolutePath());
            	ex.printStackTrace();
            }
        }
        return bigResult;
    }

    private static Hashtable ResultSetLinksNo(File resultfiles) {
        Hashtable resultLinksTable = new Hashtable();
        try {
            JAXBContext jc;
            jc = JAXBContext.newInstance("crosslink.resultsetGenerator");
            Unmarshaller um = jc.createUnmarshaller();
            LtwResultsetType lrs = (LtwResultsetType) ((um.unmarshal(resultfiles)));

            if (lrs.getLtwTopic().size() > 0) {
                for (int i = 0; i < lrs.getLtwTopic().size(); i++) {

                    int inCount = 0;
                    int outCount = 0;

                    String topicID = lrs.getLtwTopic().get(i).getId();

                    log("topicID: " + topicID);

                    if (lrs.getLtwTopic().get(i).getOutgoingLinks().getOutLink().isEmpty()) {
                    } else {
                        String[] outLinks = new String[lrs.getLtwTopic().get(i).getOutgoingLinks().getOutLink().size()];
                        for (int j = 0; j < lrs.getLtwTopic().get(i).getOutgoingLinks().getOutLink().size(); j++) {
                            outCount++;
                        }
                    }
//                    if (lrs.getLtwTopic().get(i).getIncomingLinks().getInLink().isEmpty()) {
//                    } else {
//                        String[] inLinks = new String[lrs.getLtwTopic().get(i).getIncomingLinks().getInLink().size()];
//                        for (int k = 0; k < lrs.getLtwTopic().get(i).getIncomingLinks().getInLink().size(); k++) {
//                            inCount++;
//                        }
//                    }

                    resultLinksTable.put(topicID/* + ".xml"*/, outCount + ";" + inCount);
                    log("Outgoing Links: " + outCount);
                    log("Incoming Links: " + inCount);
                }
            }

        } catch (JAXBException ex) {
            ex.printStackTrace();
        }

        return resultLinksTable;
    }

    private static String StackTraceToString(JAXBException jaxbe) {
        try {

            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            jaxbe.printStackTrace(pw);

            String retSW = sw.toString();
            String newSW = "";
            int firstPos = 0;
            int nextPos = 0;
            int endPos = 0;
            firstPos = retSW.indexOf("[");
            while (firstPos != -1) {

                endPos = retSW.indexOf("]", nextPos);
                newSW += retSW.substring(firstPos + 1, endPos) + "\n";

                nextPos = endPos + 1;
                firstPos = retSW.indexOf("[", nextPos);
            }
            sw.close();
            pw.close();

            return newSW;

        } catch (Exception e2) {
            return "Invalid Exception Catching when validating XML against Schema";
        }
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new EvaluationUI3().setVisible(true);
            }
        });
    }

    private void runsXMLConvertor(Hashtable runsHashData) {
        // To convert submitted runs from/into local XML files
        runsXMLConvertors xmlConverter = new runsXMLConvertors(runsHashData);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton RPCurveRadioButton;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JPanel calculationPanel1;
    private javax.swing.JPanel evaTablePanelHolder;
    private javax.swing.JButton evaluateButton;
    private javax.swing.JPanel evatablePanel;
    private javax.swing.JButton evatablecleanallButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuBar fileMenuBar;
    private javax.swing.JButton filecleanButton;
    private javax.swing.JTextField filedirectoryTextField;
    private javax.swing.JButton fullevatableButton;
    private javax.swing.JButton fullruntableButton;
    private javax.swing.JButton getplotsButton;
    private javax.swing.JMenuItem jMenuItemDelete;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JRadioButton jRBA2BManualrs;
    private javax.swing.JRadioButton jRBA2BWikirs;
    private javax.swing.JRadioButton jRBAnchorToBEP;
    private javax.swing.JRadioButton jRBF2FWikirs;
    private javax.swing.JRadioButton jRBFileToFile;
    private javax.swing.JRadioButton jRBalltopics;
    private javax.swing.JRadioButton jRBonlysubmitted;
    private javax.swing.JRadioButton jRadioLangAll;
    private javax.swing.JRadioButton jRadioLangJa;
    private javax.swing.JRadioButton jRadioLangJa1;
    private javax.swing.JRadioButton jRadioLangZh;
    private javax.swing.ButtonGroup langButtonGroup;
    private javax.swing.JPanel langSelectionPanel;
    private javax.swing.JButton openfilesButton;
    private javax.swing.JPanel openfilesPanel;
    private javax.swing.JPanel plotPanel;
    private javax.swing.ButtonGroup rsGroup;
    private javax.swing.JPanel runTablePanelHolder;
    private javax.swing.JPopupMenu runTbRowMenu;
    private javax.swing.JPanel runtablePanel;
    private javax.swing.JButton runtablecleanallButton;
    private javax.swing.JPanel topicSelectionPanel;
    private javax.swing.JButton uploadButton;
    // End of variables declaration//GEN-END:variables

}
