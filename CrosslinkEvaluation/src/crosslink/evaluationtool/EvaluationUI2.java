/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EvaluationUI2.java
 *
 * Created on Feb 18, 2011, 10:40:06 AM
 */

package crosslink.evaluationtool;

/**
 *
 * @author monfee
 */
public class EvaluationUI2 extends javax.swing.JFrame {

    /** Creates new form EvaluationUI2 */
    public EvaluationUI2() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        openfilesPanel = new javax.swing.JPanel();
        filedirectoryTextField = new javax.swing.JTextField();
        openfilesButton = new javax.swing.JButton();
        filecleanButton = new javax.swing.JButton();
        runtablePanel = new javax.swing.JPanel();
        fullruntableButton = new javax.swing.JButton();
        runtablecleanallButton = new javax.swing.JButton();
        runTablePanelHolder = new javax.swing.JPanel();
        this.runTablePanelHolder.add(this.realRunTablePanel);
        calculationPanel = new javax.swing.JPanel();
        byrunRadioButton = new javax.swing.JRadioButton();
        evaluateButton = new javax.swing.JButton();
        plotPanel = new javax.swing.JPanel();
        RPCurveRadioButton = new javax.swing.JRadioButton();
        getplotsButton = new javax.swing.JButton();
        evatablePanel = new javax.swing.JPanel();
        fullevatableButton = new javax.swing.JButton();
        evaTablePanelHolder = new javax.swing.JPanel();
        this.evaTablePanelHolder.add(this.realEvaTablePanel);
        evatablecleanallButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        openfilesPanel.setName("openfilesPanel"); // NOI18N

        filedirectoryTextField.setName("filedirectoryTextField"); // NOI18N

        openfilesButton.setText("Open Files");
        openfilesButton.setName("openfilesButton"); // NOI18N
        openfilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openfilesButtonActionPerformed(evt);
            }
        });

        filecleanButton.setText("Clear");
        filecleanButton.setName("filecleanButton"); // NOI18N
        filecleanButton.setPreferredSize(new java.awt.Dimension(180, 23));
        filecleanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filecleanButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout openfilesPanelLayout = new javax.swing.GroupLayout(openfilesPanel);
        openfilesPanel.setLayout(openfilesPanelLayout);
        openfilesPanelLayout.setHorizontalGroup(
            openfilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(openfilesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(openfilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filecleanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(openfilesPanelLayout.createSequentialGroup()
                        .addComponent(filedirectoryTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(openfilesButton)))
                .addContainerGap())
        );
        openfilesPanelLayout.setVerticalGroup(
            openfilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(openfilesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(openfilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openfilesButton)
                    .addComponent(filedirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filecleanButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        runtablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Run Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        runtablePanel.setName("File Information"); // NOI18N

        fullruntableButton.setText("Manage Table");
        fullruntableButton.setName("fullruntableButton"); // NOI18N
        fullruntableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullruntableButtonActionPerformed(evt);
            }
        });

        runtablecleanallButton.setText("Clear Run Table");
        runtablecleanallButton.setName("runtablecleanallButton"); // NOI18N
        runtablecleanallButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runtablecleanallButtonActionPerformed(evt);
            }
        });

        runTablePanelHolder.setName("runTablePanelHolder"); // NOI18N
        runTablePanelHolder.setLayout(new javax.swing.BoxLayout(runTablePanelHolder, javax.swing.BoxLayout.LINE_AXIS));

        javax.swing.GroupLayout runtablePanelLayout = new javax.swing.GroupLayout(runtablePanel);
        runtablePanel.setLayout(runtablePanelLayout);
        runtablePanelLayout.setHorizontalGroup(
            runtablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(runtablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(runtablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, runtablePanelLayout.createSequentialGroup()
                        .addComponent(fullruntableButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runtablecleanallButton))
                    .addComponent(runTablePanelHolder, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)))
        );
        runtablePanelLayout.setVerticalGroup(
            runtablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, runtablePanelLayout.createSequentialGroup()
                .addComponent(runTablePanelHolder, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(runtablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fullruntableButton)
                    .addComponent(runtablecleanallButton)))
        );

        calculationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Result Calculation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        calculationPanel.setName("calculationPanel"); // NOI18N

        byrunRadioButton.setSelected(true);
        byrunRadioButton.setText("by Run");
        byrunRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        byrunRadioButton.setName("byrunRadioButton"); // NOI18N

        evaluateButton.setText("Evaluate");
        evaluateButton.setName("evaluateButton"); // NOI18N
        evaluateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evaluateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout calculationPanelLayout = new javax.swing.GroupLayout(calculationPanel);
        calculationPanel.setLayout(calculationPanelLayout);
        calculationPanelLayout.setHorizontalGroup(
            calculationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(calculationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(byrunRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 190, Short.MAX_VALUE)
                .addComponent(evaluateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        calculationPanelLayout.setVerticalGroup(
            calculationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(calculationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(byrunRadioButton)
                .addComponent(evaluateButton))
        );

        plotPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Plots Computation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        plotPanel.setName("plotPanel"); // NOI18N

        RPCurveRadioButton.setSelected(true);
        RPCurveRadioButton.setText("Recall-Precision Curves");
        RPCurveRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        RPCurveRadioButton.setName("RPCurveRadioButton"); // NOI18N

        getplotsButton.setText("Get Plots");
        getplotsButton.setName("getplotsButton"); // NOI18N
        getplotsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getplotsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout plotPanelLayout = new javax.swing.GroupLayout(plotPanel);
        plotPanel.setLayout(plotPanelLayout);
        plotPanelLayout.setHorizontalGroup(
            plotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, plotPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(RPCurveRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                .addComponent(getplotsButton)
                .addContainerGap())
        );
        plotPanelLayout.setVerticalGroup(
            plotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plotPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(getplotsButton)
                .addComponent(RPCurveRadioButton))
        );

        evatablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Evaluation Sets", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        evatablePanel.setName("evatablePanel"); // NOI18N

        fullevatableButton.setText("Manage Table");
        fullevatableButton.setName("fullevatableButton"); // NOI18N
        fullevatableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullevatableButtonActionPerformed(evt);
            }
        });

        evaTablePanelHolder.setName("evaTablePanelHolder"); // NOI18N
        evaTablePanelHolder.setLayout(new javax.swing.BoxLayout(evaTablePanelHolder, javax.swing.BoxLayout.LINE_AXIS));

        evatablecleanallButton.setText("Clear Evaluation Table");
        evatablecleanallButton.setName("evatablecleanallButton"); // NOI18N
        evatablecleanallButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evatablecleanallButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout evatablePanelLayout = new javax.swing.GroupLayout(evatablePanel);
        evatablePanel.setLayout(evatablePanelLayout);
        evatablePanelLayout.setHorizontalGroup(
            evatablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, evatablePanelLayout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(fullevatableButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(evatablecleanallButton)
                .addGap(82, 82, 82))
            .addComponent(evaTablePanelHolder, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
        );
        evatablePanelLayout.setVerticalGroup(
            evatablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, evatablePanelLayout.createSequentialGroup()
                .addComponent(evaTablePanelHolder, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(evatablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(evatablecleanallButton)
                    .addComponent(fullevatableButton)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(plotPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(evatablePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(runtablePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(openfilesPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(calculationPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(openfilesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runtablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(calculationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(evatablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(plotPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openfilesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openfilesButtonActionPerformed

        String newline = "\n";
        JFileChooser fc = new JFileChooser(currentOpenDir);
        // To allow both (multiple) files and directories to be selected
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fc.setMultiSelectionEnabled(true);
        // filter XML files here
        jfcFileFilter filter = new jfcFileFilter();
        filter.addExtension("XML");
        filter.addExtension("xml");
        filter.addExtension("Xml");
        filter.setDescription("XML files only");

        fc.setFileFilter(filter);

        // Handle open files button action
        if (evt.getSource() == openfilesButton) {

            int returnVal = fc.showOpenDialog(EvaluationUI.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {

                File[] files = fc.getSelectedFiles();

                //                this.runFileCache = files;  // remember to delete
                String absFilePath = files[0].getAbsolutePath();
                currentOpenDir = absFilePath.substring(0, absFilePath.lastIndexOf(File.separator));

                if (files[0].isDirectory() && files[0].exists()) {
                    // get all files in directory
                    ioFileFilter ioFilter = new ioFileFilter();
                    files = files[0].listFiles(ioFilter);
                }
                // This part is used to eliminate the RUN files that cannot be processed by JAXB
                List<File> tmp = Arrays.asList(files);
                ArrayList<File> fileList = new ArrayList<File>(tmp);
                for (int k = 0; k < fileList.size(); k++) {
                    try {
                        JAXBContext jc = JAXBContext.newInstance("crosslink.rungenerator");

                        // ----------
                        Schema vschema = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI).newSchema(new File(schemaFilePath));

                        Unmarshaller um = jc.createUnmarshaller();
                        //                        um.setSchema(vschema);
                        // ----------
                        Object unmarshal = um.unmarshal(fileList.get(k));
                    } catch (SAXException sex) {
                        //                        System.err.println(sex.getStackTrace());
                        JOptionPane.showMessageDialog(this, fileList.get(k).getAbsolutePath() + " is invalid.\n" + sex.toString(),
                                "SAXException Message", JOptionPane.ERROR_MESSAGE);
                    } catch (JAXBException ex) {
                        String jexString = StackTraceToString(ex);
                        JOptionPane.showMessageDialog(this, fileList.get(k).getAbsolutePath() + " is invalid.\n" + jexString,
                                "Exception Message", JOptionPane.ERROR_MESSAGE);
                        fileList.remove(k);
                    }
                }
                files = fileList.toArray(new File[fileList.size()]);
                this.runFileCache = files;
                // -------------------------------------------------------------

                ArrayList<String[]> result = retrieveRunData(files);
                Object[][] r = new Object[result.size()][6];
                int count = 0;
                for (String[] x : result) {
                    r[count][0] = x[0];
                    r[count][1] = x[1];
                    r[count][2] = x[2];
                    r[count][3] = x[3];
                    r[count][4] = x[4];
                    r[count][5] = x[5];
                    //                    r[count][6] = x[6];
                    //                    r[count][7] = x[7];
                    count++;
                }

                this.realRunTablePanel.uploadFileToTable(r);

                // record the file name into "filedirectoryTextField"
                String strFiles = "";
                for (int i = 0; i < files.length; i++) {
                    strFiles += files[i].getAbsolutePath() + "; ";
                }

                this.filedirectoryTextField.setText(strFiles);

            } else {
                JOptionPane.showMessageDialog(this, "Open command cancelled by the user", "Message Board", JOptionPane.ERROR_MESSAGE);
            }
        }
}//GEN-LAST:event_openfilesButtonActionPerformed

    private void filecleanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filecleanButtonActionPerformed
        filedirectoryTextField.setText("");
}//GEN-LAST:event_filecleanButtonActionPerformed

    private void fullruntableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullruntableButtonActionPerformed
        JDialog showFullRunTable = new FullRunTable(this);
        ((FullRunTable) showFullRunTable).setTable(new RunTablePanel(this.realRunTablePanel));
        showFullRunTable.setVisible(true);
}//GEN-LAST:event_fullruntableButtonActionPerformed

    private void runtablecleanallButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runtablecleanallButtonActionPerformed
        this.realRunTablePanel.cleanAllRunTable();
}//GEN-LAST:event_runtablecleanallButtonActionPerformed

    private void evaluateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evaluateButtonActionPerformed

        try {
            resultFilePath = getResultSetPath();
            File resultFile = new File(resultFilePath);
            ArrayList<Object[]> result = new ArrayList<Object[]>();

            boolean useAllTopics = false;
            boolean useFileToBep = false;
            boolean useAnchorGToFile = false;
            boolean useAnchorGToBEP = false;

            if (this.jRBalltopics.getModel().isSelected()) {
                useAllTopics = true;
            }
            if (this.jRBFileToBep.getModel().isSelected()) {
                useFileToBep = true;
            } else if (this.jRBAnchorToFile.getModel().isSelected()) {
                useAnchorGToFile = true;
            } else if (this.jRBAnchorToBEP.getModel().isSelected()) {
                useAnchorGToBEP = true;
            }

            Color[][] spColor = {
                {new Color(150, 0, 0), new Color(150, 0, 0), new Color(150, 0, 0)},
                {new Color(0, 150, 0), new Color(0, 150, 0), new Color(0, 150, 0)},
                {new Color(0, 0, 150), new Color(0, 0, 150), new Color(0, 0, 150)},
                {new Color(150, 150, 0), new Color(150, 150, 0), new Color(150, 150, 0)},
                {new Color(200, 0, 200), new Color(200, 0, 200), new Color(200, 0, 200)}
            };



            for (int i = 0; i < this.runFileCache.length; i++) {

                metricsCalculation.EvaluationResult er;

                er = metricsCalculation.calculate(resultFile, this.runFileCache[i], useAllTopics, useFileToBep, useAnchorGToFile, useAnchorGToBEP);

                //                if (i < 5) {
                //                    result.add(new Object[]{
                //                        er.runId, "incoming", er.incomming[metricsCalculation.R_MAP],
                //                        er.incomming[metricsCalculation.R_RPREC],er.incomming[metricsCalculation.R_P5],
                //                        er.incomming[metricsCalculation.R_P10],
                //                        er.incomming[metricsCalculation.R_P20],
                //                        er.incomming[metricsCalculation.R_P30], er.incomming[metricsCalculation.R_P50],
                //                        er.incomming[metricsCalculation.R_P250],
                //                        spColor[i][0], Boolean.TRUE, Boolean.FALSE
                //                    });
                //                    result.add(new Object[]{
                //                        er.runId, "outgoing", er.outgoing[metricsCalculation.R_MAP],
                //                        er.outgoing[metricsCalculation.R_RPREC],er.outgoing[metricsCalculation.R_P5],
                //                        er.outgoing[metricsCalculation.R_P10],
                //                        er.outgoing[metricsCalculation.R_P20],
                //                        er.outgoing[metricsCalculation.R_P30], er.outgoing[metricsCalculation.R_P50],
                //                        er.outgoing[metricsCalculation.R_P250],
                //                        spColor[i][1], Boolean.TRUE, Boolean.FALSE
                //                    });
                //                    result.add(new Object[]{
                //                        er.runId, "f_score", er.combination[metricsCalculation.R_MAP],
                //                        er.combination[metricsCalculation.R_RPREC],er.combination[metricsCalculation.R_P5],
                //                        er.combination[metricsCalculation.R_P10],
                //                        er.combination[metricsCalculation.R_P20],
                //                        er.combination[metricsCalculation.R_P30], er.combination[metricsCalculation.R_P50],
                //                        er.combination[metricsCalculation.R_P250],
                //                        spColor[i][2], Boolean.TRUE, Boolean.FALSE
                //                    });
                //                } else {
                //                result.add(new Object[]{
                //                            er.runId, "incoming", er.incomming[metricsCalculation.R_MAP],
                //                            er.incomming[metricsCalculation.R_RPREC], er.incomming[metricsCalculation.R_P5],
                //                            er.incomming[metricsCalculation.R_P10],
                //                            er.incomming[metricsCalculation.R_P20],
                //                            er.incomming[metricsCalculation.R_P30], er.incomming[metricsCalculation.R_P50],
                //                            er.incomming[metricsCalculation.R_P250],
                //                            Color.LIGHT_GRAY, Boolean.FALSE, Boolean.FALSE
                //                        });
                result.add(new Object[]{
                    er.runId, "outgoing", er.outgoing[metricsCalculation.R_MAP],
                    er.outgoing[metricsCalculation.R_RPREC], er.outgoing[metricsCalculation.R_P5],
                    er.outgoing[metricsCalculation.R_P10],
                    er.outgoing[metricsCalculation.R_P20],
                    er.outgoing[metricsCalculation.R_P30], er.outgoing[metricsCalculation.R_P50],
                    er.outgoing[metricsCalculation.R_P250],
                    Color.LIGHT_GRAY, Boolean.FALSE, Boolean.FALSE
                });
                //                result.add(new Object[]{
                //                            er.runId, "f_score", er.combination[metricsCalculation.R_MAP],
                //                            er.combination[metricsCalculation.R_RPREC], er.combination[metricsCalculation.R_P5],
                //                            er.combination[metricsCalculation.R_P10],
                //                            er.combination[metricsCalculation.R_P20],
                //                            er.combination[metricsCalculation.R_P30], er.combination[metricsCalculation.R_P50],
                //                            er.combination[metricsCalculation.R_P250],
                //                            Color.LIGHT_GRAY, Boolean.FALSE, Boolean.FALSE
                //                        });
                //                }
            }
            // -----------------------------------------------------------------
            // =================================================================
            // Sort the "result" by f-score value decreasingly
            Object[][] objData = new Object[result.size()][];
            for (int i = 0; i < result.size(); i++) {
                objData[i] = result.get(i);
            }

            Object[][] evaData = null;
            if (result.size() > 1) {
                Hashtable compareHash = new Hashtable();

                for (int j = 1; j < objData.length; j = j + 2) {
                    ArrayList<Object[]> threeColl = new ArrayList<Object[]>();
                    //                threeColl.add(objData[j - 2]);
                    threeColl.add(objData[j - 1]);
                    threeColl.add(objData[j]);
                    compareHash.put(objData[j][2], threeColl);
                }
                Vector v = new Vector(compareHash.keySet());
                Collections.sort(v, Collections.reverseOrder());

                evaData = new Object[result.size()][];
                int sortIndex = 0;
                int colorCount = 0;
                for (Enumeration e = v.elements(); e.hasMoreElements();) {
                    Object key = (Object) e.nextElement();
                    ArrayList<Object[]> sortColl = (ArrayList<Object[]>) compareHash.get(key);
                    evaData[sortIndex] = sortColl.get(0);
                    evaData[sortIndex + 1] = sortColl.get(1);
                    //                evaData[sortIndex + 2] = sortColl.get(2);
                    if (colorCount < 5) {
                        evaData[sortIndex][10] = spColor[colorCount][0];
                        evaData[sortIndex + 1][10] = spColor[colorCount][1];
                        //                    evaData[sortIndex + 2][10] = spColor[colorCount][2];
                        evaData[sortIndex][11] = Boolean.TRUE;
                        evaData[sortIndex + 1][11] = Boolean.TRUE;
                        //                    evaData[sortIndex + 2][11] = Boolean.TRUE;
                    }
                    colorCount++;
                    sortIndex = sortIndex + 2;
                }
            } else {
                evaData = objData;
                evaData[0][10] = spColor[0][0];
            }
            // END of sort the result
            // =================================================================
            // -----------------------------------------------------------------

            this.realEvaTablePanel.evaluateRunsToTable(evaData);
        } catch (Exception ex) {
            ex.printStackTrace();
            //            JOptionPane.showMessageDialog(this, ex.toString(), "Exception Board", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_evaluateButtonActionPerformed

    private void getplotsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getplotsButtonActionPerformed
        try {

            boolean useAllTopics = true;
            boolean useFileToBep = false;
            boolean useAnchorToFile = false;
            boolean useAnchorToBEP = false;
            int colorColumnNo = 10;
            int linewidthColumnNo = 11;

            if (this.jRBalltopics.getModel().isSelected()) {
                useAllTopics = true;
            } else {
                useAllTopics = false;   // Only use submitted topics to calculate
            }
            if (this.jRBFileToBep.getModel().isSelected()) {
                useFileToBep = true;
            } else {
                useFileToBep = false;
            }
            if (this.jRBAnchorToFile.getModel().isSelected()) {
                useAnchorToFile = true;
            } else {
                useAnchorToFile = false;
            }
            if (this.jRBAnchorToBEP.getModel().isSelected()) {
                useAnchorToBEP = true;
            } else {
                useAnchorToBEP = false;
            }

            Vector data = this.realEvaTablePanel.getModelData();
            HashMap plotHashmap = new HashMap();
            for (Object row : data) {
                Vector aRow = (Vector) row;
                if (aRow.get(12).equals(Boolean.TRUE)) {
                    HashMap hm = (HashMap) plotHashmap.get(aRow.get(0));
                    if (hm == null) {
                        hm = new HashMap();
                        plotHashmap.put(aRow.get(0), hm);
                    }
                    Object[] ctObject = new Object[2];
                    ctObject[0] = aRow.get(colorColumnNo);
                    ctObject[1] = aRow.get(linewidthColumnNo);
                    hm.put(aRow.get(1), ctObject);   // Type & Color & Thick
                }
            }

            if (plotHashmap.isEmpty()) {

                JOptionPane.showMessageDialog(this, "Please select the plot to draw", "Message Board", JOptionPane.INFORMATION_MESSAGE);

            } else {
                resultFilePath = getResultSetPath();
                File resultFile = new File(resultFilePath);
                Vector<Object[]> incommingPlotData = new Vector<Object[]>();
                Vector<Object[]> outgoingPlotData = new Vector<Object[]>();
                Vector<Object[]> combinationPlotData = new Vector<Object[]>();
                // RESULT_TYPE_NUM: incoming --> outgoing --> combination
                for (int i = 0; i < this.runFileCache.length; i++) {
                    plotsCalculation.PRCurveResult pcr = plotsCalculation.plotCalculate(resultFile, this.runFileCache[i], useAllTopics, useFileToBep, useAnchorToFile, useAnchorToBEP);
                    if (plotHashmap.containsKey((Object) pcr.plotRunId)) {

                        HashMap hmap = (HashMap) plotHashmap.get((Object) pcr.plotRunId);
                        if (hmap.containsKey("incoming")) {
                            incommingPlotData.add(new Object[]{
                                pcr.incomming, hmap.get("incoming"), pcr.plotRunId
                            });
                        }
                        if (hmap.containsKey("outgoing")) {
                            outgoingPlotData.add(new Object[]{
                                pcr.outgoing, hmap.get("outgoing"), pcr.plotRunId
                            });
                        }
                        if (hmap.containsKey("f_score")) {
                            combinationPlotData.add(new Object[]{
                                pcr.combination, hmap.get("f_score"), pcr.plotRunId
                            });
                        }
                    }
                }

                Vector[] plotDatas = null;
                String[] plotTitle = null;
                if (incommingPlotData.isEmpty() && outgoingPlotData.isEmpty()) {
                    plotDatas = new Vector[]{combinationPlotData};
                    plotTitle = new String[]{"InteP-R Curve: Combination"};
                } else if (incommingPlotData.isEmpty() && combinationPlotData.isEmpty()) {
                    plotDatas = new Vector[]{outgoingPlotData};
                    plotTitle = new String[]{"InteP-R Curve: Outgoing"};
                } else if (outgoingPlotData.isEmpty() && combinationPlotData.isEmpty()) {
                    plotDatas = new Vector[]{incommingPlotData};
                    plotTitle = new String[]{"InteP-R Curve: Incoming"};
                } else if (incommingPlotData.isEmpty()) {
                    plotDatas = new Vector[]{
                        outgoingPlotData, combinationPlotData
                    };
                    plotTitle = new String[]{"InteP-R Curve: Outgoing", "InteP-R Curve: Combination"};
                } else if (outgoingPlotData.isEmpty()) {
                    plotDatas = new Vector[]{
                        incommingPlotData, combinationPlotData
                    };
                    plotTitle = new String[]{"InteP-R Curve: Incoming", "InteP-R Curve: Combination"};
                } else if (combinationPlotData.isEmpty()) {
                    plotDatas = new Vector[]{
                        incommingPlotData, outgoingPlotData
                    };
                    plotTitle = new String[]{"InteP-R Curve: Incoming", "InteP-R Curve: Outgoing"};
                } else {
                    plotDatas = new Vector[]{
                        incommingPlotData, outgoingPlotData, combinationPlotData
                    };
                    plotTitle = new String[]{"InteP-R Curve: Incoming", "InteP-R Curve: Outgoing", "InteP-R Curve: Combination"};
                }

                for (int j = 0; j < plotDatas.length; j++) {
                    Vector<Object[]> cool_data_points = (Vector<Object[]>) plotDatas[j];
                    JChartDialog jplot = new JChartDialog(this, false, plotTitle[j], cool_data_points);

                    // Export Selected Row Data to .CSV
                    this.exportPlotDatatoCSV(plotTitle[j], cool_data_points);
                    // End of Export to .CSV

                    Point ploca = this.getLocation();
                    //                    jplot.setLocation(ploca.x + j * 30, ploca.y + j * 30);
                    //                    jplot.setVisible(true);
                }
            }

        } catch (PropertyException ex) {
            ex.printStackTrace();
        } catch (ChartDataException ex) {
            ex.printStackTrace();
        }
}//GEN-LAST:event_getplotsButtonActionPerformed

    private void fullevatableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullevatableButtonActionPerformed
        JDialog showFullEvaTable = new FullEvaTable(this);
        ((FullEvaTable) showFullEvaTable).setTable(new EvaTablePanel(this.realEvaTablePanel));
        showFullEvaTable.setVisible(true);
}//GEN-LAST:event_fullevatableButtonActionPerformed

    private void evatablecleanallButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evatablecleanallButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_evatablecleanallButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EvaluationUI2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton RPCurveRadioButton;
    private javax.swing.JRadioButton byrunRadioButton;
    private javax.swing.JPanel calculationPanel;
    private javax.swing.JPanel evaTablePanelHolder;
    private javax.swing.JButton evaluateButton;
    private javax.swing.JPanel evatablePanel;
    private javax.swing.JButton evatablecleanallButton;
    private javax.swing.JButton filecleanButton;
    private javax.swing.JTextField filedirectoryTextField;
    private javax.swing.JButton fullevatableButton;
    private javax.swing.JButton fullruntableButton;
    private javax.swing.JButton getplotsButton;
    private javax.swing.JButton openfilesButton;
    private javax.swing.JPanel openfilesPanel;
    private javax.swing.JPanel plotPanel;
    private javax.swing.JPanel runTablePanelHolder;
    private javax.swing.JPanel runtablePanel;
    private javax.swing.JButton runtablecleanallButton;
    // End of variables declaration//GEN-END:variables

}
